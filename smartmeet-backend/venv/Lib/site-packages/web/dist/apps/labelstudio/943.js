"use strict";(self.webpackChunklabelstudio=self.webpackChunklabelstudio||[]).push([[943],{6324:(t,e,n)=>{n.r(e),n.d(e,{FFTProcessor:()=>i});var s=n(47710);class l{constructor(t,e,n){this.filterbank=void 0,this.numBands=void 0,n<=0?(console.warn("Number of Mel bands must be positive."),this.filterbank=[],this.numBands=0):(this.numBands=n,this.filterbank=this.createMelFilterbank(t,e,n))}applyFilterbank(t){if(0===this.filterbank.length||0===this.numBands)return console.warn("Mel filter bank not initialized or invalid."),new Float32Array(this.numBands).fill(0);if(this.filterbank.length>0&&this.filterbank[0].length!==t.length)return console.error(`Mel filter bank bin count (${this.filterbank[0].length}) does not match linear spectrum length (${t.length}). Recreate MelBanks instance.`),new Float32Array(this.numBands).fill(0);const e=new Float32Array(this.numBands).fill(0);for(let n=0;n<this.numBands;n++){const s=this.filterbank[n];for(let l=0;l<s.length;l++)e[n]+=t[l]*s[l];e[n]=e[n]>0?e[n]:1e-10}return e}hzToMel(t){return 2595*Math.log10(1+t/700)}melToHz(t){return 700*(10**(t/2595)-1)}createMelFilterbank(t,e,n){if(n<=0||e<=1||t<=0)return console.warn("Invalid parameters for Mel filterbank creation."),[];const s=this.hzToMel(t/2);if(0>=s)return console.warn("Min Mel frequency is not less than Max Mel frequency."),[];const l=new Float32Array(n+2),a=(s-0)/(n+1);if(a<=0)return console.warn("Calculated Mel step is not positive."),[];for(let t=0;t<n+2;t++)l[t]=0+t*a;const i=l.map((t=>this.melToHz(t))),r=t/(2*(e-1)),f=new Float32Array(e).map(((t,e)=>e*r)),o=[];for(let t=0;t<n;t++){const n=new Array(e).fill(0),s=i[t],l=i[t+1],a=i[t+2],h=l-s,u=a-l;if(h<=0||u<=0){console.warn(`Degenerate filter shape detected for Mel band ${t} (center: ${l.toFixed(2)} Hz). Applying visual fix.`);const s=Math.round(l/r),a=Math.max(0,Math.min(e-1,s));a>=0&&a<e&&(n[a]=1)}else for(let t=0;t<e;t++){const e=f[t];e>=s&&e<=l?n[t]=(e-s)/h:e>l&&e<=a&&(n[t]=(a-e)/u)}o.push(n)}return o}}var a=n(50719);class i{constructor(t){this.options=void 0,this.webfftInstance=null,this.melBanksCache=null,this.melBanksCacheKey=null,this.fftInputBuffer=null,this.fftInterleavedInputBuffer=null,this.options=Object.assign({},t,{fftSamples:t.fftSamples||a.BK.FFT_SAMPLES,windowingFunction:t.windowingFunction||"hann"}),this.initialize()}initialize(){try{this.webfftInstance=new s.A(this.options.fftSamples),this.webfftInstance.profile(),this.fftInputBuffer=new Float32Array(this.options.fftSamples),this.fftInterleavedInputBuffer=new Float32Array(2*this.options.fftSamples)}catch(t){this.webfftInstance=null,this.fftInputBuffer=null,this.fftInterleavedInputBuffer=null}}updateParameters(t){const e=t.fftSamples&&t.fftSamples!==this.options.fftSamples,n=t.sampleRate&&t.sampleRate!==this.options.sampleRate;var s;(this.options=Object.assign({},this.options,t),e)?(null==(s=this.webfftInstance)||s.dispose(),this.initialize(),this.melBanksCache=null,this.melBanksCacheKey=null):n&&(this.melBanksCache=null,this.melBanksCacheKey=null)}calculatePowerSpectrum(t){if(!this.webfftInstance||!this.fftInputBuffer||!this.fftInterleavedInputBuffer||0===t.length)return this.handleFFTError();const e=t.slice(0,this.options.fftSamples);this.fftInputBuffer.set(e),e.length<this.options.fftSamples&&this.fftInputBuffer.fill(0,e.length),function(t,e="hann"){const n=t.length;switch(e.toLowerCase()){case"hann":for(let e=0;e<n;e++)t[e]*=.5*(1-Math.cos(2*Math.PI*e/(n-1)));break;case"hamming":for(let e=0;e<n;e++)t[e]*=.54-.46*Math.cos(2*Math.PI*e/(n-1));break;case"blackman":for(let e=0;e<n;e++)t[e]*=.42-.5*Math.cos(2*Math.PI*e/(n-1))+.08*Math.cos(4*Math.PI*e/(n-1))}}(this.fftInputBuffer,this.options.windowingFunction);try{for(let t=0;t<this.options.fftSamples;t++)this.fftInterleavedInputBuffer[2*t]=this.fftInputBuffer[t],this.fftInterleavedInputBuffer[2*t+1]=0;const t=this.webfftInstance.fft(this.fftInterleavedInputBuffer);if(!t)return console.error("WebFFT returned invalid result",t),this.handleFFTError();const e=t,n=this.options.fftSamples/2+1,s=new Float32Array(n),l=this.options.fftSamples,a=e[0];s[0]=Math.abs(a)/l;for(let t=1;t<n;t++){const n=e[2*t],a=e[2*t+1];s[t]=Math.sqrt(n*n+a*a)/l}return s}catch(t){return console.error("Error during FFT calculation:",t),this.handleFFTError()}}convertToMelScale(t,e){if(!this.options.sampleRate)return console.warn("Sample rate required for Mel scale conversion."),null;if(e<=0)return console.warn("Number of Mel bands must be positive."),null;const n=t.length,s=`${this.options.sampleRate}-${n}-${e}`;if(!this.melBanksCache||this.melBanksCacheKey!==s)try{this.melBanksCache=new l(this.options.sampleRate,n,e),this.melBanksCacheKey=s}catch(t){return console.error("Failed to create MelBanks instance:",t),this.melBanksCache=null,this.melBanksCacheKey=null,null}try{return this.melBanksCache.applyFilterbank(t)}catch(t){return console.error("Error applying Mel filterbank:",t),null}}handleFFTError(){return null}dispose(){var t;null==(t=this.webfftInstance)||t.dispose(),this.webfftInstance=null,this.fftInputBuffer=null,this.fftInterleavedInputBuffer=null,this.melBanksCache=null,this.melBanksCacheKey=null}get fftSamples(){return this.options.fftSamples}}}}]);
//# sourceMappingURL=943.js.map