{"version":3,"file":"943.js","mappings":"2JAGO,MAAMA,EAWXC,WAAAA,CAAYC,EAAoBC,EAAwBC,GAAkB,KAVlEC,gBAAU,OACVD,cAAQ,EAUVA,GAAY,GACdE,QAAQC,KAAK,yCAEbC,KAAKH,WAAa,GAClBG,KAAKJ,SAAW,IAEhBI,KAAKJ,SAAWA,EAChBI,KAAKH,WAAaG,KAAKC,oBAAoBP,EAAYC,EAAgBC,GAE3E,CAQAM,eAAAA,CAAgBC,GACd,GAA+B,IAA3BH,KAAKH,WAAWO,QAAkC,IAAlBJ,KAAKJ,SAGvC,OAFAE,QAAQC,KAAK,+CAEN,IAAIM,aAAaL,KAAKJ,UAAUU,KAAK,GAI9C,GAAIN,KAAKH,WAAWO,OAAS,GAAKJ,KAAKH,WAAW,GAAGO,SAAWD,EAAeC,OAI7E,OAHAN,QAAQS,MACL,8BAA6BP,KAAKH,WAAW,GAAGO,kDAAkDD,EAAeC,wCAE7G,IAAIC,aAAaL,KAAKJ,UAAUU,KAAK,GAG9C,MAAME,EAAc,IAAIH,aAAaL,KAAKJ,UAAUU,KAAK,GACzD,IAAK,IAAIG,EAAI,EAAGA,EAAIT,KAAKJ,SAAUa,IAAK,CACtC,MAAMC,EAASV,KAAKH,WAAWY,GAE/B,IAAK,IAAIE,EAAI,EAAGA,EAAID,EAAON,OAAQO,IACjCH,EAAYC,IAAMN,EAAeQ,GAAKD,EAAOC,GAG/CH,EAAYC,GAAKD,EAAYC,GAAK,EAAID,EAAYC,GAAK,KACzD,CAEA,OAAOD,CACT,CAKQI,OAAAA,CAAQC,GACd,OAAO,KAAOC,KAAKC,MAAM,EAAIF,EAAK,IACpC,CAKQG,OAAAA,CAAQC,GACd,OAAO,KAAO,KAAOA,EAAM,MAAQ,EACrC,CAKQhB,mBAAAA,CAAoBP,EAAoBC,EAAwBC,GAEtE,GAAIA,GAAY,GAAKD,GAAkB,GAAKD,GAAc,EAExD,OADAI,QAAQC,KAAK,mDACN,GAGT,MACMmB,EAAclB,KAAKY,QAAQlB,EAAa,GAG9C,GAJmB,GAIDwB,EAEhB,OADApB,QAAQC,KAAK,yDACN,GAGT,MAAMoB,EAAY,IAAId,aAAaT,EAAW,GACxCwB,GAAWF,EAVE,IAU2BtB,EAAW,GAGzD,GAAIwB,GAAW,EAEb,OADAtB,QAAQC,KAAK,wCACN,GAIT,IAAK,IAAIU,EAAI,EAAGA,EAAIb,EAAW,EAAGa,IAChCU,EAAUV,GApBO,EAoBWA,EAAIW,EAGlC,MAAMC,EAAyBF,EAAUG,KAAKL,GAAQjB,KAAKgB,QAAQC,KAE7DM,EAAyB7B,GAAc,GAAKC,EAAiB,IAC7D6B,EAAyB,IAAInB,aAAaV,GAAgB2B,KAAI,CAACG,EAAGhB,IAAMA,EAAIc,IAE5E1B,EAAyB,GAC/B,IAAK,IAAIY,EAAI,EAAGA,EAAIb,EAAUa,IAAK,CACjC,MAAMC,EAAS,IAAIgB,MAAM/B,GAAgBW,KAAK,GACxCqB,EAASN,EAASZ,GAClBmB,EAAWP,EAASZ,EAAI,GACxBoB,EAAUR,EAASZ,EAAI,GAGvBqB,EAAYF,EAAWD,EACvBI,EAAaF,EAAUD,EAG7B,GAAIE,GAAa,GAAKC,GAAc,EAAG,CAMrCjC,QAAQC,KACL,iDAAgDU,cAAcmB,EAASI,QACtE,gCAIJ,MAAMC,EAAiBnB,KAAKoB,MAAMN,EAAWL,GAEvCY,EAAkBrB,KAAKsB,IAAI,EAAGtB,KAAKuB,IAAI1C,EAAiB,EAAGsC,IAC7DE,GAAmB,GAAKA,EAAkBxC,IAC5Ce,EAAOyB,GAAmB,EAG9B,MAEE,IAAK,IAAIxB,EAAI,EAAGA,EAAIhB,EAAgBgB,IAAK,CACvC,MAAM2B,EAAOd,EAASb,GAElB2B,GAAQX,GAAUW,GAAQV,EAC5BlB,EAAOC,IAAM2B,EAAOX,GAAUG,EAGvBQ,EAAOV,GAAYU,GAAQT,IAClCnB,EAAOC,IAAMkB,EAAUS,GAAQP,EAEnC,CAEFlC,EAAW0C,KAAK7B,EAClB,CACA,OAAOb,CACT,E,eCjJK,MAAM2C,EAYX/C,WAAAA,CAAYgD,GAA8B,KAXlCA,aAAO,OACPC,eAAgC,KAExC,KACQC,cAAiC,KAAI,KACrCC,iBAAkC,KAE1C,KACQC,eAAsC,KAAI,KAC1CC,0BAAiD,KAGvD9C,KAAKyC,QAAOM,OAAAC,OAAA,GACPP,EAAO,CACVQ,WAAYR,EAAQQ,YAAcC,EAAAA,GAAqBC,YACvDC,kBAAmBX,EAAQW,mBAAqB,SAElDpD,KAAKqD,YACP,CAEQA,UAAAA,GACN,IACErD,KAAK0C,eAAiB,IAAIY,EAAAA,EAAOtD,KAAKyC,QAAQQ,YAE7CjD,KAAK0C,eAAuBa,UAG7BvD,KAAK6C,eAAiB,IAAIxC,aAAaL,KAAKyC,QAAQQ,YAEpDjD,KAAK8C,0BAA4B,IAAIzC,aAAuC,EAA1BL,KAAKyC,QAAQQ,WACjE,CAAE,MAAOO,GACPxD,KAAK0C,eAAiB,KACtB1C,KAAK6C,eAAiB,KACtB7C,KAAK8C,0BAA4B,IACnC,CACF,CAKAW,gBAAAA,CAAiBC,GACf,MAAMC,EAAwBD,EAAWT,YAAcS,EAAWT,aAAejD,KAAKyC,QAAQQ,WAExFW,EAAqBF,EAAWhE,YAAcgE,EAAWhE,aAAeM,KAAKyC,QAAQ/C,WAIhE,IAAAmE,GAF3B7D,KAAKyC,QAAOM,OAAAC,OAAA,GAAQhD,KAAKyC,QAAYiB,GAEjCC,IACiB,OAAnBE,EAAA7D,KAAK0C,iBAALmB,EAAqBC,UACrB9D,KAAKqD,aACLrD,KAAK2C,cAAgB,KACrB3C,KAAK4C,iBAAmB,MACfgB,IACT5D,KAAK2C,cAAgB,KACrB3C,KAAK4C,iBAAmB,KAE5B,CAUAmB,sBAAAA,CAAuBC,GACrB,IAAKhE,KAAK0C,iBAAmB1C,KAAK6C,iBAAmB7C,KAAK8C,2BAA+C,IAAlBkB,EAAO5D,OAC5F,OAAOJ,KAAKiE,iBAKd,MAAMC,EAAaF,EAAOG,MAAM,EAAGnE,KAAKyC,QAAQQ,YAIhDjD,KAAK6C,eAAeuB,IAAIF,GACpBA,EAAW9D,OAASJ,KAAKyC,QAAQQ,YACnCjD,KAAK6C,eAAevC,KAAK,EAAG4D,EAAW9D,QCtFtC,SAA6B4D,EAAsBK,EAAiC,QACzF,MAAMC,EAAIN,EAAO5D,OAEjB,OAAQiE,EAAWE,eACjB,IAAK,OACH,IAAK,IAAI9D,EAAI,EAAGA,EAAI6D,EAAG7D,IACrBuD,EAAOvD,IAAM,IAAO,EAAIK,KAAK0D,IAAK,EAAI1D,KAAK2D,GAAKhE,GAAM6D,EAAI,KAE5D,MACF,IAAK,UACH,IAAK,IAAI7D,EAAI,EAAGA,EAAI6D,EAAG7D,IACrBuD,EAAOvD,IAAM,IAAO,IAAOK,KAAK0D,IAAK,EAAI1D,KAAK2D,GAAKhE,GAAM6D,EAAI,IAE/D,MACF,IAAK,WACH,IAAK,IAAI7D,EAAI,EAAGA,EAAI6D,EAAG7D,IACrBuD,EAAOvD,IAAM,IAAO,GAAMK,KAAK0D,IAAK,EAAI1D,KAAK2D,GAAKhE,GAAM6D,EAAI,IAAM,IAAOxD,KAAK0D,IAAK,EAAI1D,KAAK2D,GAAKhE,GAAM6D,EAAI,IAOnH,CDmEII,CAAoB1E,KAAK6C,eAAgB7C,KAAKyC,QAAQW,mBAEtD,IAEE,IAAK,IAAI3C,EAAI,EAAGA,EAAIT,KAAKyC,QAAQQ,WAAYxC,IAC3CT,KAAK8C,0BAA0B,EAAIrC,GAAKT,KAAK6C,eAAepC,GAC5DT,KAAK8C,0BAA0B,EAAIrC,EAAI,GAAK,EAI9C,MAAMkE,EAAY3E,KAAK0C,eAAekC,IAAI5E,KAAK8C,2BAG/C,IAAK6B,EAEH,OADA7E,QAAQS,MAAM,iCAAkCoE,GACzC3E,KAAKiE,iBAId,MAAMY,EAAiBF,EAKjBG,EAAe9E,KAAKyC,QAAQQ,WAAa,EAAI,EAC7C8B,EAAgB,IAAI1E,aAAayE,GACjCE,EAAahF,KAAKyC,QAAQQ,WAG1BgC,EAASJ,EAAe,GAC9BE,EAAc,GAAKjE,KAAKoE,IAAID,GAAUD,EAGtC,IAAK,IAAIvE,EAAI,EAAGA,EAAIqE,EAAcrE,IAAK,CACrC,MAAM0E,EAAON,EAAe,EAAIpE,GAC1B2E,EAAOP,EAAe,EAAIpE,EAAI,GAKpCsE,EAActE,GAAKK,KAAKuE,KAAKF,EAAOA,EAAOC,EAAOA,GAAQJ,CAC5D,CAEA,OAAOD,CACT,CAAE,MAAOxE,GAEP,OADAT,QAAQS,MAAM,gCAAiCA,GACxCP,KAAKiE,gBACd,CACF,CASAqB,iBAAAA,CAAkBnF,EAA8BoF,GAC9C,IAAKvF,KAAKyC,QAAQ/C,WAEhB,OADAI,QAAQC,KAAK,kDACN,KAET,GAAIwF,GAAoB,EAEtB,OADAzF,QAAQC,KAAK,yCACN,KAGT,MAAMJ,EAAiBQ,EAAeC,OAChCoF,EAAc,GAAExF,KAAKyC,QAAQ/C,cAAcC,KAAkB4F,IAGnE,IAAKvF,KAAK2C,eAAiB3C,KAAK4C,mBAAqB4C,EACnD,IACExF,KAAK2C,cAAgB,IAAInD,EAASQ,KAAKyC,QAAQ/C,WAAYC,EAAgB4F,GAC3EvF,KAAK4C,iBAAmB4C,CAC1B,CAAE,MAAOjF,GAIP,OAHAT,QAAQS,MAAM,sCAAuCA,GACrDP,KAAK2C,cAAgB,KACrB3C,KAAK4C,iBAAmB,KACjB,IACT,CAIF,IACE,OAAO5C,KAAK2C,cAAczC,gBAAgBC,EAC5C,CAAE,MAAOI,GAEP,OADAT,QAAQS,MAAM,iCAAkCA,GACzC,IACT,CACF,CAKQ0D,cAAAA,GAEN,OAAO,IACT,CAKAH,OAAAA,GAAU,IAAA2B,EACW,OAAnBA,EAAAzF,KAAK0C,iBAAL+C,EAAqB3B,UACrB9D,KAAK0C,eAAiB,KACtB1C,KAAK6C,eAAiB,KACtB7C,KAAK8C,0BAA4B,KACjC9C,KAAK2C,cAAgB,KACrB3C,KAAK4C,iBAAmB,IAC1B,CAGA,cAAIK,GACF,OAAOjD,KAAKyC,QAAQQ,UACtB,E","sources":["webpack://labelstudio/../../libs/editor/src/lib/AudioUltra/Analysis/MelBanks.ts","webpack://labelstudio/../../libs/editor/src/lib/AudioUltra/Analysis/FFTProcessor.ts","webpack://labelstudio/../../libs/editor/src/lib/AudioUltra/Visual/WindowFunctions.ts"],"sourcesContent":["/**\n * Handles the creation and application of Mel filter banks for audio analysis.\n */\nexport class MelBanks {\n  private filterbank: number[][];\n  private numBands: number;\n\n  /**\n   * Initializes the MelBanks instance and creates the filterbank.\n   *\n   * @param sampleRate - The sample rate of the audio.\n   * @param linearBinCount - The number of frequency bins in the linear spectrum (fftSize / 2 + 1).\n   * @param numBands - The desired number of Mel bands.\n   */\n  constructor(sampleRate: number, linearBinCount: number, numBands: number) {\n    if (numBands <= 0) {\n      console.warn(\"Number of Mel bands must be positive.\");\n      // Provide a default empty filterbank to avoid errors later\n      this.filterbank = [];\n      this.numBands = 0;\n    } else {\n      this.numBands = numBands;\n      this.filterbank = this.createMelFilterbank(sampleRate, linearBinCount, numBands);\n    }\n  }\n\n  /**\n   * Applies the pre-calculated Mel filter bank to a linear power spectrum.\n   *\n   * @param linearSpectrum - The input linear power spectrum (magnitudes).\n   * @returns The spectrum converted to the Mel scale.\n   */\n  applyFilterbank(linearSpectrum: Float32Array): Float32Array {\n    if (this.filterbank.length === 0 || this.numBands === 0) {\n      console.warn(\"Mel filter bank not initialized or invalid.\");\n      // Return an empty or zero-filled array matching the expected band count\n      return new Float32Array(this.numBands).fill(0);\n    }\n\n    // Ensure the filter bank bin count matches linear spectrum length\n    if (this.filterbank.length > 0 && this.filterbank[0].length !== linearSpectrum.length) {\n      console.error(\n        `Mel filter bank bin count (${this.filterbank[0].length}) does not match linear spectrum length (${linearSpectrum.length}). Recreate MelBanks instance.`,\n      );\n      return new Float32Array(this.numBands).fill(0);\n    }\n\n    const melSpectrum = new Float32Array(this.numBands).fill(0);\n    for (let i = 0; i < this.numBands; i++) {\n      const filter = this.filterbank[i];\n      // filter bank[0].length should equal linearSpectrum.length due to check above\n      for (let j = 0; j < filter.length; j++) {\n        melSpectrum[i] += linearSpectrum[j] * filter[j];\n      }\n      // Add a small epsilon to avoid log(0) if further log scaling is applied later\n      melSpectrum[i] = melSpectrum[i] > 0 ? melSpectrum[i] : 1e-10;\n    }\n\n    return melSpectrum;\n  }\n\n  /**\n   * Converts frequency in Hz to Mel scale.\n   */\n  private hzToMel(hz: number): number {\n    return 2595 * Math.log10(1 + hz / 700);\n  }\n\n  /**\n   * Converts Mel scale value back to frequency in Hz.\n   */\n  private melToHz(mel: number): number {\n    return 700 * (10 ** (mel / 2595) - 1);\n  }\n\n  /**\n   * Creates a Mel filter bank matrix.\n   */\n  private createMelFilterbank(sampleRate: number, linearBinCount: number, numBands: number): number[][] {\n    // Basic parameter validation\n    if (numBands <= 0 || linearBinCount <= 1 || sampleRate <= 0) {\n      console.warn(\"Invalid parameters for Mel filterbank creation.\");\n      return [];\n    }\n\n    const lowFreqMel = 0;\n    const highFreqMel = this.hzToMel(sampleRate / 2);\n\n    // Check for degenerate Mel range\n    if (lowFreqMel >= highFreqMel) {\n      console.warn(\"Min Mel frequency is not less than Max Mel frequency.\");\n      return [];\n    }\n\n    const melPoints = new Float32Array(numBands + 2);\n    const melStep = (highFreqMel - lowFreqMel) / (numBands + 1);\n\n    // Check for a non-positive Mel step\n    if (melStep <= 0) {\n      console.warn(\"Calculated Mel step is not positive.\");\n      return [];\n    }\n\n    // Create evenly spaced points in a Mel scale\n    for (let i = 0; i < numBands + 2; i++) {\n      melPoints[i] = lowFreqMel + i * melStep;\n    }\n\n    const hzPoints: Float32Array = melPoints.map((mel) => this.melToHz(mel));\n    // Calculate the frequency resolution of the linear FFT bins\n    const freqResolution: number = sampleRate / (2 * (linearBinCount - 1));\n    const binFreqs: Float32Array = new Float32Array(linearBinCount).map((_, i) => i * freqResolution);\n\n    const filterbank: number[][] = [];\n    for (let i = 0; i < numBands; i++) {\n      const filter = new Array(linearBinCount).fill(0);\n      const leftHz = hzPoints[i];\n      const centerHz = hzPoints[i + 1];\n      const rightHz = hzPoints[i + 2];\n\n      // Check for non-positive frequency steps which cause division by zero\n      const leftDelta = centerHz - leftHz;\n      const rightDelta = rightHz - centerHz;\n\n      // Handle degenerate filters where the triangle collapses due to discretization\n      if (leftDelta <= 0 || rightDelta <= 0) {\n        // Visual Fix: Instead of a zero-energy filter (causing a dark line\n        // in the spectrogram), assign a weight of 1.0 to the single FFT bin\n        // closest to the center frequency. This passes the energy from that bin\n        // through, avoiding the artifact, although it's not true Mel filtering\n        // for this specific band.\n        console.warn(\n          `Degenerate filter shape detected for Mel band ${i} (center: ${centerHz.toFixed(\n            2,\n          )} Hz). Applying visual fix.`,\n        );\n        // Find the bin index closest to the center frequency\n        const targetBinIndex = Math.round(centerHz / freqResolution);\n        // Ensure the index is within bounds\n        const clampedBinIndex = Math.max(0, Math.min(linearBinCount - 1, targetBinIndex));\n        if (clampedBinIndex >= 0 && clampedBinIndex < linearBinCount) {\n          filter[clampedBinIndex] = 1.0;\n        }\n        // No need to continue; push the filter with the single '1'\n      } else {\n        // Normal filter calculation for non-degenerate triangles\n        for (let j = 0; j < linearBinCount; j++) {\n          const freq = binFreqs[j];\n          // Rising slope\n          if (freq >= leftHz && freq <= centerHz) {\n            filter[j] = (freq - leftHz) / leftDelta;\n          }\n          // Falling slope\n          else if (freq > centerHz && freq <= rightHz) {\n            filter[j] = (rightHz - freq) / rightDelta;\n          }\n        }\n      }\n      filterbank.push(filter);\n    }\n    return filterbank;\n  }\n}\n","import webfft from \"webfft\";\nimport { applyWindowFunction, type WindowFunctionType } from \"../Visual/WindowFunctions\";\nimport { MelBanks } from \"./MelBanks\";\nimport { SPECTROGRAM_DEFAULTS } from \"../Visual/constants\";\n\nexport type SpectrogramScale = \"linear\" | \"log\" | \"mel\";\n\nexport interface FFTProcessorOptions {\n  fftSamples: number;\n  windowingFunction: WindowFunctionType;\n  sampleRate?: number;\n}\n\n/**\n * Handles the core FFT calculations, windowing, and Mel scale conversion.\n */\nexport class FFTProcessor {\n  private options: FFTProcessorOptions;\n  private webfftInstance: webfft | null = null;\n\n  // Added a cache for MelBanks instances to avoid recreating them constantly\n  private melBanksCache: MelBanks | null = null;\n  private melBanksCacheKey: string | null = null;\n\n  // Persistent buffers for performance\n  private fftInputBuffer: Float32Array | null = null;\n  private fftInterleavedInputBuffer: Float32Array | null = null;\n\n  constructor(options: FFTProcessorOptions) {\n    this.options = {\n      ...options,\n      fftSamples: options.fftSamples || SPECTROGRAM_DEFAULTS.FFT_SAMPLES,\n      windowingFunction: options.windowingFunction || \"hann\",\n    };\n    this.initialize();\n  }\n\n  private initialize() {\n    try {\n      this.webfftInstance = new webfft(this.options.fftSamples);\n      // Run profiling immediately after initialization\n      (this.webfftInstance as any).profile();\n\n      // Pre-allocate buffers\n      this.fftInputBuffer = new Float32Array(this.options.fftSamples);\n      // webfft might need interleaved input (real, imag, real, imag, ...)\n      this.fftInterleavedInputBuffer = new Float32Array(this.options.fftSamples * 2);\n    } catch (_error) {\n      this.webfftInstance = null;\n      this.fftInputBuffer = null;\n      this.fftInterleavedInputBuffer = null;\n    }\n  }\n\n  /**\n   * Updates FFT parameters. Re-initializes FFT instance and Mel filterbank if necessary.\n   */\n  updateParameters(newOptions: Partial<FFTProcessorOptions>) {\n    const needsReinitialization = newOptions.fftSamples && newOptions.fftSamples !== this.options.fftSamples;\n    // Check if the sampleRate changed, as it affects MelBanks\n    const needsMelCacheClear = newOptions.sampleRate && newOptions.sampleRate !== this.options.sampleRate;\n\n    this.options = { ...this.options, ...newOptions };\n\n    if (needsReinitialization) {\n      this.webfftInstance?.dispose(); // Clean up old instance if exists\n      this.initialize(); // Re-initialize with a new size\n      this.melBanksCache = null; // Clear MelBanks cache if FFT size changes\n      this.melBanksCacheKey = null;\n    } else if (needsMelCacheClear) {\n      this.melBanksCache = null; // Clear MelBanks cache if the sample rate changes\n      this.melBanksCacheKey = null;\n    }\n  }\n\n  /**\n   * Calculates the power spectrum for a given audio buffer segment.\n   * Applies windowing function before FFT.\n   * Handles potential errors during FFT calculation.\n   *\n   * @param buffer The input audio data segment.\n   * @returns The power spectrum (magnitude) or null if FFT failed.\n   */\n  calculatePowerSpectrum(buffer: Float32Array): Float32Array | null {\n    if (!this.webfftInstance || !this.fftInputBuffer || !this.fftInterleavedInputBuffer || buffer.length === 0) {\n      return this.handleFFTError();\n    }\n\n    // Ensure the input buffer has the correct data, applying windowing\n    // Use slice(0, fftSamples) in case the input buffer is longer\n    const inputSlice = buffer.slice(0, this.options.fftSamples);\n\n    // Copy sliced data into the pre-allocated buffer\n    // Pad with zeros if inputSlice is shorter than fftSamples\n    this.fftInputBuffer.set(inputSlice);\n    if (inputSlice.length < this.options.fftSamples) {\n      this.fftInputBuffer.fill(0, inputSlice.length);\n    }\n\n    // Now apply the window function IN-PLACE to the fftInputBuffer\n    applyWindowFunction(this.fftInputBuffer, this.options.windowingFunction);\n\n    try {\n      // Prepare interleaved input for webfft (assuming real input)\n      for (let i = 0; i < this.options.fftSamples; i++) {\n        this.fftInterleavedInputBuffer[2 * i] = this.fftInputBuffer[i]; // Real part (now correctly windowed)\n        this.fftInterleavedInputBuffer[2 * i + 1] = 0; // Imaginary part\n      }\n\n      // Perform FFT\n      const fftResult = this.webfftInstance.fft(this.fftInterleavedInputBuffer);\n\n      // Add a check for a valid FFT result\n      if (!fftResult) {\n        console.error(\"WebFFT returned invalid result\", fftResult);\n        return this.handleFFTError();\n      }\n\n      // Cast the result after the check using any as a workaround\n      const validFftResult = fftResult as any;\n\n      // Calculate magnitude (power spectrum)\n      // Output is complex (real, imag), we need sqrt(real^2 + imag^2)\n      // Result is half the size + 1 (due to symmetry)\n      const spectrumSize = this.options.fftSamples / 2 + 1;\n      const powerSpectrum = new Float32Array(spectrumSize);\n      const normFactor = this.options.fftSamples; // Normalization factor (FFT size)\n\n      // Handle DC component (index 0)\n      const dcReal = validFftResult[0];\n      powerSpectrum[0] = Math.abs(dcReal) / normFactor;\n\n      // Handle remaining bins up to Nyquist\n      for (let i = 1; i < spectrumSize; i++) {\n        const real = validFftResult[2 * i];\n        const imag = validFftResult[2 * i + 1];\n        // Normalize the magnitude\n        // Note: Standard normalization often uses N for power, 2/N for amplitude spectrum (excluding DC/Nyquist)\n        // We are calculating power (magnitude squared implicitly via dB conversion later),\n        // but normalizing magnitude by N here is common before dB.\n        powerSpectrum[i] = Math.sqrt(real * real + imag * imag) / normFactor;\n      }\n\n      return powerSpectrum;\n    } catch (error) {\n      console.error(\"Error during FFT calculation:\", error);\n      return this.handleFFTError();\n    }\n  }\n\n  /**\n   * Converts a linear power spectrum to the Mel scale using the MelBanks class.\n   *\n   * @param linearSpectrum The input power spectrum.\n   * @param numberOfMelBands The desired number of Mel bands for this conversion.\n   * @returns The Mel scaled spectrum or null if parameters are missing/invalid.\n   */\n  convertToMelScale(linearSpectrum: Float32Array, numberOfMelBands: number): Float32Array | null {\n    if (!this.options.sampleRate) {\n      console.warn(\"Sample rate required for Mel scale conversion.\");\n      return null;\n    }\n    if (numberOfMelBands <= 0) {\n      console.warn(\"Number of Mel bands must be positive.\");\n      return null;\n    }\n\n    const linearBinCount = linearSpectrum.length;\n    const currentKey = `${this.options.sampleRate}-${linearBinCount}-${numberOfMelBands}`;\n\n    // Check cache\n    if (!this.melBanksCache || this.melBanksCacheKey !== currentKey) {\n      try {\n        this.melBanksCache = new MelBanks(this.options.sampleRate, linearBinCount, numberOfMelBands);\n        this.melBanksCacheKey = currentKey;\n      } catch (error) {\n        console.error(\"Failed to create MelBanks instance:\", error);\n        this.melBanksCache = null;\n        this.melBanksCacheKey = null;\n        return null;\n      }\n    }\n\n    // Apply the filter bank using the cached instance\n    try {\n      return this.melBanksCache.applyFilterbank(linearSpectrum);\n    } catch (error) {\n      console.error(\"Error applying Mel filterbank:\", error);\n      return null;\n    }\n  }\n\n  /**\n   * Returns a fallback array when FFT calculation fails.\n   */\n  private handleFFTError(): Float32Array | null {\n    // Return null to indicate failure, let the caller decide on fallback\n    return null;\n  }\n\n  /**\n   * Cleans up the WebFFT instance.\n   */\n  dispose() {\n    this.webfftInstance?.dispose();\n    this.webfftInstance = null;\n    this.fftInputBuffer = null;\n    this.fftInterleavedInputBuffer = null;\n    this.melBanksCache = null; // Clear cache on dispose\n    this.melBanksCacheKey = null;\n  }\n\n  // Getter for FFT samples size\n  get fftSamples(): number {\n    return this.options.fftSamples;\n  }\n}\n","/**\n * Available window function types for audio processing\n */\nexport type WindowFunctionType = \"hann\" | \"hamming\" | \"blackman\" | \"rectangular\";\n\n/**\n * Applies a window function to a buffer of audio samples\n * @param buffer - The audio samples to apply the window function to\n * @param windowType - The type of window function to apply\n */\nexport function applyWindowFunction(buffer: Float32Array, windowType: WindowFunctionType = \"hann\"): void {\n  const n = buffer.length;\n\n  switch (windowType.toLowerCase()) {\n    case \"hann\":\n      for (let i = 0; i < n; i++) {\n        buffer[i] *= 0.5 * (1 - Math.cos((2 * Math.PI * i) / (n - 1)));\n      }\n      break;\n    case \"hamming\":\n      for (let i = 0; i < n; i++) {\n        buffer[i] *= 0.54 - 0.46 * Math.cos((2 * Math.PI * i) / (n - 1));\n      }\n      break;\n    case \"blackman\":\n      for (let i = 0; i < n; i++) {\n        buffer[i] *= 0.42 - 0.5 * Math.cos((2 * Math.PI * i) / (n - 1)) + 0.08 * Math.cos((4 * Math.PI * i) / (n - 1));\n      }\n      break;\n    case \"rectangular\":\n      // No window function (rectangular)\n      break;\n  }\n}\n"],"names":["MelBanks","constructor","sampleRate","linearBinCount","numBands","filterbank","console","warn","this","createMelFilterbank","applyFilterbank","linearSpectrum","length","Float32Array","fill","error","melSpectrum","i","filter","j","hzToMel","hz","Math","log10","melToHz","mel","highFreqMel","melPoints","melStep","hzPoints","map","freqResolution","binFreqs","_","Array","leftHz","centerHz","rightHz","leftDelta","rightDelta","toFixed","targetBinIndex","round","clampedBinIndex","max","min","freq","push","FFTProcessor","options","webfftInstance","melBanksCache","melBanksCacheKey","fftInputBuffer","fftInterleavedInputBuffer","Object","assign","fftSamples","SPECTROGRAM_DEFAULTS","FFT_SAMPLES","windowingFunction","initialize","webfft","profile","_error","updateParameters","newOptions","needsReinitialization","needsMelCacheClear","_this$webfftInstance","dispose","calculatePowerSpectrum","buffer","handleFFTError","inputSlice","slice","set","windowType","n","toLowerCase","cos","PI","applyWindowFunction","fftResult","fft","validFftResult","spectrumSize","powerSpectrum","normFactor","dcReal","abs","real","imag","sqrt","convertToMelScale","numberOfMelBands","currentKey","_this$webfftInstance2"],"sourceRoot":""}